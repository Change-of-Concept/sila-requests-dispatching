import time
import asyncio
import streamlit as st
import pandas as pd

from core.db import add_request, add_serial_number
from core.utils import to_fixed, combine_serial_numbers
from core.loader import label_decoder, hardware_type_classifier, request_type_classifier


st.set_page_config(
    page_title="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
    page_icon="üëã",
)

st.write("# –î–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏—è –∑–∞—è–≤–æ–∫")

with st.form("request_form"):
    st.header("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ")

    theme = st.text_input("–¢–µ–º–∞")
    description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ")
    submitted = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")

    if submitted:
        with st.spinner('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...'):
            start_time = time.time()

            theme = theme.replace('_x000D_', '')
            description = description.replace('_x000D_', '')

            hardware_type, hardware_type_confidence = hardware_type_classifier.predict(theme, description)
            request_type, request_type_confidence = request_type_classifier.predict(theme, description)

            request_id = asyncio.run(add_request(theme, description, label_decoder.request_type_labels[request_type], 
                                                 str(request_type_confidence), label_decoder.hardware_type_labels[hardware_type], 
                                                 str(hardware_type_confidence)))

            serial_numbers = combine_serial_numbers(theme, description)

            for number in serial_numbers:
                asyncio.run(add_serial_number(request_id, number))

            serial_numbers_df = pd.DataFrame(serial_numbers, columns=['–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä'])

            generation_time = time.time() - start_time

        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π") 

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("#### –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è")
            st.metric(label="–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", value=label_decoder.hardware_type_labels[hardware_type])
            st.metric(label="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", value=f"{to_fixed(hardware_type_confidence*100, 2)}%")

        with col2:
            st.markdown("#### –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –æ—Ç–∫–∞–∑–∞")
            st.metric(label="–¢–æ—á–∫–∞ –æ—Ç–∫–∞–∑–∞", value=label_decoder.request_type_labels[request_type])
            st.metric(label="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", value=f"{to_fixed(request_type_confidence*100, 2)}%")

        st.markdown("#### –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        st.write(f"{generation_time:.2f} —Å–µ–∫—É–Ω–¥")

        st.divider()  
        st.subheader("–°–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞")
        if len(serial_numbers) > 0:
            st.dataframe(serial_numbers_df)
        else:
            st.text('–°–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')
